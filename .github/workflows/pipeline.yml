name: "Terraform"

on:
  push:
    branches:
      - main
  pull_request:

env:
  TF_VAR_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
  TF_VAR_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VAR_docker_hub_secret: ${{ secrets.DOCKER_HUB_SECRET }}
  TF_VAR_rds_pg_password: ${{ secrets.RDS_PG_PASSWORD }}
  AWS_REGION: "eu-west-3"

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Docker Hub Login
        id: login
        run: |
          export TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "${{ env.DOCKER_HUB_USERNAME }}", "password": "${{ secrets.DOCKER_HUB_SECRET }}"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
          echo "::set-output name=token::$TOKEN"

      - name: Get latest Docker Hub tag
        id: latest-tag
        env:
          TOKEN: ${{ steps.login.outputs.token }}
          USERNAME: ${{ env.DOCKER_HUB_USERNAME }}
          REPOSITORY: ${{ env.DOCKER_HUB_REPOSITORY }}
        run: |
          curl -s -H "Authorization: Bearer $TOKEN" "https://hub.docker.com/v2/repositories/lvandenbossche/fpr-backend/tags/" | jq -r '.results[] | select(.name != "latest") | .name'
          TAG=$(curl -s -H "Authorization: Bearer $TOKEN" "https://hub.docker.com/v2/repositories/lvandenbossche/fpr-backend/tags/" | jq -r '.results[] | select(.name != "latest") | .name')
          echo "::set-output name=tag::$TAG"

      - name: Use Docker Hub Tag
        env:
          TAG: ${{ steps.latest-tag.outputs.tag }}
        run: |
          echo "Using Docker Hub tag: $TAG"

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false